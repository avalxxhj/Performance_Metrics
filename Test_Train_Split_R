set.seed(9)
num_obs = nrow(Advertising)

train_index = sample(num_obs, size = trunc(0.50 * num_obs))
train_data = Advertising[train_index, ]
test_data = Advertising[-train_index, ]

#start with the simplest possible linear model, that is, a model with no predictors
fit_0 = lm(Sales ~ 1, data = train_data)
get_complexity(fit_0)

# train RMSE
sqrt(mean((train_data$Sales - predict(fit_0, train_data)) ^ 2))

# test RMSE
sqrt(mean((test_data$Sales - predict(fit_0, test_data)) ^ 2)) 

# train RMSE
rmse(actual = train_data$Sales, predicted = predict(fit_0, train_data))

# test RMSE
rmse(actual = test_data$Sales, predicted = predict(fit_0, test_data))

get_rmse = function(model, data, response) {
  rmse(actual = subset(data, select = response, drop = TRUE),
       predicted = predict(model, data))
}

get_rmse(model = fit_0, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_0, data = test_data, response = "Sales") # test RMSE

#the training error decrease each time adding flexibility to the model 
#the test error will decrease a number of times, then eventually start going up, as a result of overfitting.
fit_1 = lm(Sales ~ ., data = train_data)
get_complexity(fit_1)

get_rmse(model = fit_1, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_1, data = test_data, response = "Sales") # test RMSE

fit_2 = lm(Sales ~ Radio * Newspaper * TV, data = train_data)
get_complexity(fit_2)

get_rmse(model = fit_2, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_2, data = test_data, response = "Sales") # test RMSE

fit_3 = lm(Sales ~ Radio * Newspaper * TV + I(TV ^ 2), data = train_data)
get_complexity(fit_3)

get_rmse(model = fit_3, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_3, data = test_data, response = "Sales") # test RMSE

fit_4 = lm(Sales ~ Radio * Newspaper * TV + 
           I(TV ^ 2) + I(Radio ^ 2) + I(Newspaper ^ 2), data = train_data)
get_complexity(fit_4)

get_rmse(model = fit_4, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_4, data = test_data, response = "Sales") # test RMSE

fit_5 = lm(Sales ~ Radio * Newspaper * TV +
           I(TV ^ 2) * I(Radio ^ 2) * I(Newspaper ^ 2), data = train_data)
get_complexity(fit_5)

get_rmse(model = fit_5, data = train_data, response = "Sales") # train RMSE

get_rmse(model = fit_5, data = test_data, response = "Sales") # test RMSE

#chosing a model
fit_1 = lm(Sales ~ ., data = train_data)
fit_2 = lm(Sales ~ Radio * Newspaper * TV, data = train_data)
fit_3 = lm(Sales ~ Radio * Newspaper * TV + I(TV ^ 2), data = train_data)
fit_4 = lm(Sales ~ Radio * Newspaper * TV + 
           I(TV ^ 2) + I(Radio ^ 2) + I(Newspaper ^ 2), data = train_data)
fit_5 = lm(Sales ~ Radio * Newspaper * TV +
           I(TV ^ 2) * I(Radio ^ 2) * I(Newspaper ^ 2), data = train_data)

model_list = list(fit_1, fit_2, fit_3, fit_4, fit_5)

#obtain train RMSE, test RMSE, and model complexity for each.

train_rmse = sapply(model_list, get_rmse, data = train_data, response = "Sales")
test_rmse = sapply(model_list, get_rmse, data = test_data, response = "Sales")
model_complexity = sapply(model_list, get_complexity)

#plot the results

plot(model_complexity, train_rmse, type = "b", 
     ylim = c(min(c(train_rmse, test_rmse)) - 0.02, 
              max(c(train_rmse, test_rmse)) + 0.02), 
     col = "dodgerblue", 
     xlab = "Model Size",
     ylab = "RMSE")
lines(model_complexity, test_rmse, type = "b", col = "darkorange")

#Underfitting models: In general High Train RMSE, High Test RMSE. 
#Overfitting models: In general Low Train RMSE, High Test RMSE. 
#A model is overfitting if there exists a less complex model with lower Test RMSE, underfitting if there exists a more complex model with lower Test RMSE.

